openapi: 3.0.1
info:
  version: 1.0.0
  title: Online education service
  description: Online lections cervice for students and teachers
tags:
  - name: course
    description: All about courses
  - name: user
    description: Students
  - name: request
    description: Operations about user
paths:
  /course:
    put:
      tags:
        - course
      summary: Update an existing course
      operationId: updateCourse
      requestBody:
        description: information about the course
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
          application/xml:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Course not found
          content: {}
        '405':
          description: Validation exception
          content: {}
      security:
        - lections_auth:
            - 'write:TeacherID'
      x-codegen-request-body-name: body
    post:
      tags:
        - course
      summary: Add a new course to the store
      operationId: addCourse
      requestBody:
        description: the
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
          application/xml:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        '405':
          description: Invalid input
          content: {}
      security:
        - lections_auth:
            - 'write:TeacherID'
      x-codegen-request-body-name: body
  /course/rewiewAll:
    get:
      tags:
        - course
      summary: all of the courses
      operationId: Find The
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              default: available
              enum:
                - available
                - full
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Course'
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: Invalid status value
          content: {}
      security:
        - lections_auth:
            - 'write:TeacherID'
            - 'read:StudentID'
            - 'read:StudentID'
  '/course/{id}':
    get:
      tags:
        - course
      summary: Wiew a course by ID
      description: Information about Course
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of course
          schema:
            type: integer
            example: 4567
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
            application/xml:
              schema:
                $ref: '#/components/schemas/Course'
    delete:
      tags:
        - course
      summary: Delete cource
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 4567
      responses:
        '200':
          description: Successful deleted
      security:
        - lections_auth:
            - 'write:StudentID'
  /request:
    post:
      tags:
        - request
      summary: Students requested for adding to the course
      operationId: getInventory
      parameters:
        - name: courseId
          in: query
          description: Course id to select a course
          required: true
          schema:
            $ref: '#/components/schemas/Request'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
            application/xml:
              schema:
                $ref: '#/components/schemas/Course'
      security:
        - lections_auth:
            - 'write:StudentID'
    get:
      tags:
        - request
      summary: Look all requests
      operationId: ViewReq
      parameters:
        - name: Courseid
          in: query
          description: The user name for login
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
      security:
        - lections_auth:
            - 'write:TeacherID'
  /user/Teacher:
    post:
      tags:
        - user
      summary: Creation account for teacher
      description: This can only be done by the logged in user.
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Teacher'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      security:
        - lections_auth:
            - 'write:TeacherID'
  /user/student:
    post:
      tags:
        - user
      summary: Creation account for student
      description: This can only be done by the logged in user.
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      security:
        - lections_auth:
            - 'write:StudentID'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username/password supplied
      security:
        - lections_auth:
            - 'write:TeacherID'
            - 'write:StudentID'
            - 'read:TeacherID'
            - 'read:StudentID'
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
      security:
        - lections_auth:
            - 'write:TeacherID'
            - 'write:StudentID'
            - 'read:TeacherID'
            - 'read:StudentID'
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '400':
          description: Invalid user supplied
          content: {}
        '404':
          description: User not found
          content: {}
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
components:
  schemas:
    Teacher:
      type: object
      properties:
        id:
          type: integer
        firstname:
          type: string
        lastname:
          type: string
        password:
          type: string
    Student:
      type: object
      properties:
        id:
          type: integer
        firstname:
          type: string
        lastname:
          type: string
        password:
          type: string
    Request:
      type: object
      properties:
        coorseId:
          type: integer
          format: int64
        studentId:
          type: integer
          format: int64
    User:
      type: object
      required:
        - status
        - username
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        status:
          type: string
          enum:
            - teacher
            - student
      xml:
        name: User
    Course:
      required:
        - id
        - ownerOfCourse
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: math
        ownerOfCourse:
          $ref: '#/components/schemas/Teacher'
        studentsOfCourse:
          type: array
          maxLength: 5
          items:
            $ref: '#/components/schemas/Student'
        status:
          type: string
          description: status of the course
          enum:
            - available
            - filled
      xml:
        name: Course
  securitySchemes:
    lections_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http
          scopes:
            'write:TeacherID': it will give you teacher rights
            'read:StudentID': it will give you student rights
